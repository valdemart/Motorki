legend:
+ - to do
- - done
* - in progress
# - ready for tests
? - possibly to do

- game
	- team deathmatch available (another locked due to no testing but it should be ok to just unlock them)
- gameplay
	- bugfix: frags/point counters now working correctly during collisions
	- bugfix: frags/point counters now working correctly for all frags/points changes
	- respawning algorithm corrected for team games
	- frags/points counters text changed
- UIClasses
	- UITextBox now has character filtering routine available (UITextBox.CharacterFilter)
		! character filtering is not used during programmatic text changes - set text programmatically to the correct text before allowing user actions

todo:
+ connecting
	+ cancel
+ maps
	+ notify map loading progress to loading screen
	+ drawing to split screen part (to be done when GamePlayScreen will be available)
	# test what will happen if many motors spawn at the same place&time
	+ more maps
+ minimap
+ textures
	+ bonus textures
? add animations into UIClasses controls
* networking
	+ read bot sophistication, connected count and max count in EnumerateServers
	+ NetPlayerMotor class
+ audio support
* finish implementing game menus and screens
	+ partially need: networking (for JoinGame support - NewGame can work in offline if it needs)
	? need: anchors in UIControl
	+ New game - push to Loading screen
	+ game play init: split screen and two player support
+ game
	+ unlock team game modes
	* GamePlay class (game progress processor; also network client)
	+ bonus storage (map contains bonus accessibility for game; server generates bonusses)
	* collision detection
		+ rebounds (change algorithm)
	* UI
		+ frag/point counters
			+ team notifications
			# demolition notifications (counter should show how many of all motors is still alive)
		+ party members
		+ split screen
	# game types (implementation)
	+ check team spawn obtaining method
? UI: move state shifting to switch-case scheme (instead of ?: scheme) - state machines for documentation
? UI: lock unused properties accessibility
? UI: anchors
<engineer>
+ bots
	+ bot sophistication normal/hard
	+ bot sophistication controls in new game screen
	+ connect in GamePlay game initialization routines (need additional GameSettings field)
	+ in higher sophistication MindProc routines need to delegate GameTime information to the BotAgent routines
		? isn't it just much worthy to throw easy mode also on the agent system?
	+ (different point of view) BotSystem class as part of GamePlay (higher level than BotMotor)
		! allows to start system separately from starting/registering agents
	! need some agent description format
	! need some tactics for bots (defensive, offensive, cooperatively offensive)
		! need some communication for bots to use during cooperatives